name: 构建
on:
  workflow_call:
    inputs:
      # 需要检出的 Git 仓库地址
      source_repo:
        required: true
        type: string
      # 推送到 Docker Hub 的镜像名称
      docker_image_name:
        required: true
        type: string
      # Dockerfile 路径，默认为项目根目录
      dockerfile_path:
        required: false
        type: string
        default: "Dockerfile"
      # 构建上下文路径，默认为项目根目录
      context_path:
        required: false
        type: string
        default: "."
      # 是否使用自定义Dockerfile（位于当前仓库中）
      use_custom_dockerfile:
        required: false
        type: boolean
        default: false
      # 自定义Dockerfile路径（当use_custom_dockerfile为true时使用）
      custom_dockerfile_path:
        required: false
        type: string
        default: ""
      # 是否使用docker-compose构建
      use_compose_build:
        required: false
        type: boolean
        default: false
      compose_file_path:
        required: false
        type: string
        default: "docker-compose.yml"
      # 其他需要复制的文件，格式为JSON数组字符串: [{"source": "path/to/source", "destination": "path/to/destination"}]
      additional_files_to_copy:
        required: false
        type: string
        default: "[]"    
    secrets:
      # 调用时需要传入的 secrets
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出当前仓库（用于获取自定义Dockerfile）
        if: ${{ inputs.use_custom_dockerfile }}
        uses: actions/checkout@main
        with:
          path: current-repo

      - name: 检出目标仓库
        uses: actions/checkout@main
        with:
          repository: ${{ inputs.source_repo }}
          path: target-repo

      - name: 复制自定义Dockerfile到目标仓库
        if: ${{ inputs.use_custom_dockerfile }}
        run: |
          mkdir -p target-repo/$(dirname "${{ inputs.custom_dockerfile_path }}")
          cp "current-repo/${{ inputs.custom_dockerfile_path }}" "target-repo/${{ inputs.custom_dockerfile_path }}"

      - name: 登录 Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@master

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: 设置 Docker Compose
        uses: docker/setup-compose-action@main
        if: ${{ inputs.use_compose_build }}

      - name: 安装 jq
        if: ${{ inputs.use_compose_build }}
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: 获取当前日期
        id: date
        run: echo "tag=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: 提取 Docker 元数据
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.docker_image_name }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.date.outputs.tag }}

      - name: 输出 Docker 标签
        run: |
          echo "docker 标签为："
          echo "${{ steps.meta.outputs.tags }}"

      - name: 使用 Docker Compose 构建
        if: ${{ inputs.use_compose_build }}
        run: |
          cd target-repo
          # 只有当 additional_files_to_copy 不为空数组时才执行 jq 命令
          if [ "${{ inputs.additional_files_to_copy }}" != "[]" ]; then
            # 使用单引号包装输入以避免引号转义问题
            echo '${{ inputs.additional_files_to_copy }}' | jq -r '.[] | .source + "\t" + .destination' | while IFS=$'\t' read -r source_file destination_file; do
              if [ -n "$source_file" ] && [ -f "$source_file" ]; then
                echo "复制文件：$source_file 到 $destination_file"
                cp "$source_file" "$destination_file"
              else
                echo "源文件不存在或未指定：$source_file"
              fi
            done
          else
            echo "没有需要复制的额外文件。"
          fi

          # 将标签写入 docker-build-env 文件，供 docker-compose 使用
          echo "DOCKER_IMAGE_TAG=${{ steps.date.outputs.tag }}" > docker-build-env
          echo "DOCKER_IMAGE_LATEST=latest" >> docker-build-env
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> docker-build-env
          echo "DOCKER_IMAGE_NAME=${{ inputs.docker_image_name }}" >> docker-build-env

          # 构建镜像
          docker compose -f ${{ inputs.compose_file_path }} --env-file docker-build-env build

          # 获取项目名称（用于构建镜像名）
          project_name=$(basename $(pwd))
          echo "项目名称: $project_name"

          # 为服务打标签并推送
          services=$(docker compose -f ${{ inputs.compose_file_path }} --env-file docker-build-env config --services)
          for service in $services; do
            # 构建目标镜像名称
            target_image_name="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.docker_image_name }}-${service}"
            tag="${{ steps.date.outputs.tag }}"

            echo "处理服务: $service"

            # 使用docker-compose images获取服务的实际镜像ID
            echo "获取服务 $service 的镜像ID..."
            image_id=$(docker compose -f ${{ inputs.compose_file_path }} --env-file docker-build-env images -q "$service")

            if [ -n "$image_id" ]; then
              echo "找到镜像ID: $image_id"
              # 使用镜像ID进行标记
              if docker tag "$image_id" "$target_image_name:$tag"; then
                echo "成功为镜像 $image_id 打标签 $target_image_name:$tag"
                docker tag "$image_id" "$target_image_name:latest"

                # 推送镜像
                echo "推送镜像 $target_image_name:$tag"
                docker push "$target_image_name:$tag"
                echo "推送镜像 $target_image_name:latest"
                docker push "$target_image_name:latest"
              else
                echo "为镜像 $image_id 打标签失败"
                echo "错误: 无法为服务 $service 创建或标记镜像"
                exit 1
              fi
            else
              echo "未找到服务 $service 的镜像ID"
              # 尝试使用传统方式（服务名）
              echo "尝试使用服务名标记..."
              if docker tag "$service" "$target_image_name:$tag" 2>/dev/null; then
                echo "成功为服务 $service 打标签"
                docker tag "$service" "$target_image_name:latest"

                # 推送镜像
                echo "推送镜像 $target_image_name:$tag"
                docker push "$target_image_name:$tag"
                echo "推送镜像 $target_image_name:latest"
                docker push "$target_image_name:latest"
              else
                echo "使用服务名标记也失败"
                # 列出所有镜像以帮助调试
                echo "当前所有镜像:"
                docker images
                echo "错误: 无法为服务 $service 找到或标记镜像"
                exit 1
              fi
            fi
          done

      - name: 构建并且推送 Docker 镜像
        if: ${{ !inputs.use_compose_build }}
        uses: docker/build-push-action@master
        with:
          context: ./target-repo
          file: ${{ inputs.use_custom_dockerfile && format('./target-repo/{0}', inputs.custom_dockerfile_path) || format('./target-repo/{0}', inputs.dockerfile_path) }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
